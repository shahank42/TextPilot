// This file is auto-generated by @hey-api/openapi-ts

export type ApiApiError = {
    code?: string;
    message?: string;
};

/**
 * Represents a single WhatsApp chat (one-on-one or group).
 */
export type ModelsChat = {
    /**
     * Description for group chats
     */
    description?: string;
    /**
     * Indicates if the chat is a group
     */
    isGroup?: boolean;
    /**
     * JID of the chat
     */
    jid?: string;
    /**
     * Display name of the chat
     */
    name?: string;
    /**
     * List of participants for group chats
     */
    participants?: Array<ModelsParticipant>;
    pfp?: string;
};

/**
 * Represents a single WhatsApp message.
 */
export type ModelsMessage = {
    /**
     * JID of the chat the message belongs to
     */
    chatJID?: string;
    /**
     * Unique ID of the message
     */
    id?: string;
    /**
     * Indicates if the message was sent by the client
     */
    isFromMe?: boolean;
    /**
     * JID of the sender
     */
    senderJID?: string;
    /**
     * Text content of the message
     */
    text?: string;
    /**
     * Unix timestamp of the message
     */
    timestamp?: number;
};

/**
 * Represents a single participant in a group chat.
 */
export type ModelsParticipant = {
    /**
     * Indicates if the participant is an admin
     */
    isAdmin?: boolean;
    /**
     * JID of the participant
     */
    jid?: string;
};

/**
 * Request body for sending a message.
 */
export type ModelsSendMessageRequest = {
    /**
     * JID of the recipient
     */
    jid?: string;
    /**
     * Text content of the message
     */
    text?: string;
};

export type PostClientsConnectData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/clients/connect';
};

export type PostClientsConnectErrors = {
    /**
     * Internal Server Error
     */
    500: ApiApiError;
};

export type PostClientsConnectError = PostClientsConnectErrors[keyof PostClientsConnectErrors];

export type PostClientsConnectResponses = {
    /**
     * Client ID
     */
    200: string;
};

export type PostClientsConnectResponse = PostClientsConnectResponses[keyof PostClientsConnectResponses];

export type GetClientsByClientIdChatsData = {
    body?: never;
    path: {
        /**
         * Client ID
         */
        clientID: string;
    };
    query?: never;
    url: '/clients/{clientID}/chats';
};

export type GetClientsByClientIdChatsErrors = {
    /**
     * Client not found
     */
    404: ApiApiError;
    /**
     * Internal Server Error
     */
    500: ApiApiError;
};

export type GetClientsByClientIdChatsError = GetClientsByClientIdChatsErrors[keyof GetClientsByClientIdChatsErrors];

export type GetClientsByClientIdChatsResponses = {
    /**
     * List of chats retrieved successfully
     */
    200: Array<ModelsChat>;
};

export type GetClientsByClientIdChatsResponse = GetClientsByClientIdChatsResponses[keyof GetClientsByClientIdChatsResponses];

export type GetClientsByClientIdChatsByChatIdData = {
    body?: never;
    path: {
        /**
         * Client ID
         */
        clientID: string;
        /**
         * Chat JID (e.g., 1234567890@s.whatsapp.net or 123456-7890@g.us)
         */
        chatID: string;
    };
    query?: never;
    url: '/clients/{clientID}/chats/{chatID}';
};

export type GetClientsByClientIdChatsByChatIdErrors = {
    /**
     * Invalid chat ID format
     */
    400: ApiApiError;
    /**
     * Client or chat not found
     */
    404: ApiApiError;
    /**
     * Internal Server Error
     */
    500: ApiApiError;
};

export type GetClientsByClientIdChatsByChatIdError = GetClientsByClientIdChatsByChatIdErrors[keyof GetClientsByClientIdChatsByChatIdErrors];

export type GetClientsByClientIdChatsByChatIdResponses = {
    /**
     * Chat details retrieved successfully
     */
    200: ModelsChat;
};

export type GetClientsByClientIdChatsByChatIdResponse = GetClientsByClientIdChatsByChatIdResponses[keyof GetClientsByClientIdChatsByChatIdResponses];

export type PostClientsByClientIdDisconnectData = {
    body?: never;
    path: {
        /**
         * Client ID
         */
        clientID: string;
    };
    query?: never;
    url: '/clients/{clientID}/disconnect';
};

export type PostClientsByClientIdDisconnectErrors = {
    /**
     * Client not found
     */
    404: ApiApiError;
};

export type PostClientsByClientIdDisconnectError = PostClientsByClientIdDisconnectErrors[keyof PostClientsByClientIdDisconnectErrors];

export type PostClientsByClientIdDisconnectResponses = {
    /**
     * Success message
     */
    200: {
        [key: string]: string;
    };
};

export type PostClientsByClientIdDisconnectResponse = PostClientsByClientIdDisconnectResponses[keyof PostClientsByClientIdDisconnectResponses];

export type GetClientsByClientIdEventsData = {
    body?: never;
    path: {
        /**
         * Client ID
         */
        clientID: string;
    };
    query?: never;
    url: '/clients/{clientID}/events';
};

export type GetClientsByClientIdEventsErrors = {
    /**
     * Client not found
     */
    404: ApiApiError;
    /**
     * Streaming unsupported or Internal Server Error
     */
    500: ApiApiError;
};

export type GetClientsByClientIdEventsError = GetClientsByClientIdEventsErrors[keyof GetClientsByClientIdEventsErrors];

export type GetClientsByClientIdEventsResponses = {
    /**
     * Event stream established
     */
    200: string;
};

export type GetClientsByClientIdEventsResponse = GetClientsByClientIdEventsResponses[keyof GetClientsByClientIdEventsResponses];

export type PostClientsByClientIdMessagesSendData = {
    /**
     * Message details
     */
    body: ModelsSendMessageRequest;
    path: {
        /**
         * Client ID
         */
        clientID: string;
    };
    query?: never;
    url: '/clients/{clientID}/messages/send';
};

export type PostClientsByClientIdMessagesSendErrors = {
    /**
     * Invalid request body or JID format
     */
    400: ApiApiError;
    /**
     * Client not found
     */
    404: ApiApiError;
    /**
     * Internal Server Error
     */
    500: ApiApiError;
};

export type PostClientsByClientIdMessagesSendError = PostClientsByClientIdMessagesSendErrors[keyof PostClientsByClientIdMessagesSendErrors];

export type PostClientsByClientIdMessagesSendResponses = {
    /**
     * Message sent successfully
     */
    200: ModelsMessage;
};

export type PostClientsByClientIdMessagesSendResponse = PostClientsByClientIdMessagesSendResponses[keyof PostClientsByClientIdMessagesSendResponses];

export type ClientOptions = {
    baseUrl: string;
};