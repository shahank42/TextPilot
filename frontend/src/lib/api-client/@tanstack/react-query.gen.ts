// This file is auto-generated by @hey-api/openapi-ts

import { type Options, postClientsConnect, getClientsByClientIdChats, getClientsByClientIdChatsByChatId, postClientsByClientIdDisconnect, getClientsByClientIdEvents, postClientsByClientIdMessagesSend } from '../sdk.gen';
import { queryOptions, type UseMutationOptions } from '@tanstack/react-query';
import type { PostClientsConnectData, PostClientsConnectError, PostClientsConnectResponse, GetClientsByClientIdChatsData, GetClientsByClientIdChatsByChatIdData, PostClientsByClientIdDisconnectData, PostClientsByClientIdDisconnectError, PostClientsByClientIdDisconnectResponse, GetClientsByClientIdEventsData, PostClientsByClientIdMessagesSendData, PostClientsByClientIdMessagesSendError, PostClientsByClientIdMessagesSendResponse } from '../types.gen';
import { client as _heyApiClient } from '../client.gen';

export type QueryKey<TOptions extends Options> = [
    Pick<TOptions, 'baseUrl' | 'body' | 'headers' | 'path' | 'query'> & {
        _id: string;
        _infinite?: boolean;
    }
];

const createQueryKey = <TOptions extends Options>(id: string, options?: TOptions, infinite?: boolean): [
    QueryKey<TOptions>[0]
] => {
    const params: QueryKey<TOptions>[0] = { _id: id, baseUrl: (options?.client ?? _heyApiClient).getConfig().baseUrl } as QueryKey<TOptions>[0];
    if (infinite) {
        params._infinite = infinite;
    }
    if (options?.body) {
        params.body = options.body;
    }
    if (options?.headers) {
        params.headers = options.headers;
    }
    if (options?.path) {
        params.path = options.path;
    }
    if (options?.query) {
        params.query = options.query;
    }
    return [
        params
    ];
};

export const postClientsConnectQueryKey = (options?: Options<PostClientsConnectData>) => createQueryKey('postClientsConnect', options);

/**
 * Connect a new WhatsApp client
 * Initializes a new WhatsApp client and returns a server-generated clientID.
 */
export const postClientsConnectOptions = (options?: Options<PostClientsConnectData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postClientsConnect({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postClientsConnectQueryKey(options)
    });
};

/**
 * Connect a new WhatsApp client
 * Initializes a new WhatsApp client and returns a server-generated clientID.
 */
export const postClientsConnectMutation = (options?: Partial<Options<PostClientsConnectData>>): UseMutationOptions<PostClientsConnectResponse, PostClientsConnectError, Options<PostClientsConnectData>> => {
    const mutationOptions: UseMutationOptions<PostClientsConnectResponse, PostClientsConnectError, Options<PostClientsConnectData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postClientsConnect({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getClientsByClientIdChatsQueryKey = (options: Options<GetClientsByClientIdChatsData>) => createQueryKey('getClientsByClientIdChats', options);

/**
 * Get all chats for a client
 * Retrieves a list of all contacts and groups (chats) associated with a specific client.
 */
export const getClientsByClientIdChatsOptions = (options: Options<GetClientsByClientIdChatsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getClientsByClientIdChats({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getClientsByClientIdChatsQueryKey(options)
    });
};

export const getClientsByClientIdChatsByChatIdQueryKey = (options: Options<GetClientsByClientIdChatsByChatIdData>) => createQueryKey('getClientsByClientIdChatsByChatId', options);

/**
 * Get chat details
 * Retrieves detailed information for a specific chat, including participants for groups.
 */
export const getClientsByClientIdChatsByChatIdOptions = (options: Options<GetClientsByClientIdChatsByChatIdData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getClientsByClientIdChatsByChatId({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getClientsByClientIdChatsByChatIdQueryKey(options)
    });
};

export const postClientsByClientIdDisconnectQueryKey = (options: Options<PostClientsByClientIdDisconnectData>) => createQueryKey('postClientsByClientIdDisconnect', options);

/**
 * Disconnect a WhatsApp client
 * Disconnects the specified client, closes the WhatsApp session, and cleans up resources.
 */
export const postClientsByClientIdDisconnectOptions = (options: Options<PostClientsByClientIdDisconnectData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postClientsByClientIdDisconnect({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postClientsByClientIdDisconnectQueryKey(options)
    });
};

/**
 * Disconnect a WhatsApp client
 * Disconnects the specified client, closes the WhatsApp session, and cleans up resources.
 */
export const postClientsByClientIdDisconnectMutation = (options?: Partial<Options<PostClientsByClientIdDisconnectData>>): UseMutationOptions<PostClientsByClientIdDisconnectResponse, PostClientsByClientIdDisconnectError, Options<PostClientsByClientIdDisconnectData>> => {
    const mutationOptions: UseMutationOptions<PostClientsByClientIdDisconnectResponse, PostClientsByClientIdDisconnectError, Options<PostClientsByClientIdDisconnectData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postClientsByClientIdDisconnect({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};

export const getClientsByClientIdEventsQueryKey = (options: Options<GetClientsByClientIdEventsData>) => createQueryKey('getClientsByClientIdEvents', options);

/**
 * Stream real-time events for a client
 * Establishes a Server-Sent Events (SSE) connection to stream real-time WhatsApp events (e.g., QR codes, messages, connection status).
 */
export const getClientsByClientIdEventsOptions = (options: Options<GetClientsByClientIdEventsData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await getClientsByClientIdEvents({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: getClientsByClientIdEventsQueryKey(options)
    });
};

export const postClientsByClientIdMessagesSendQueryKey = (options: Options<PostClientsByClientIdMessagesSendData>) => createQueryKey('postClientsByClientIdMessagesSend', options);

/**
 * Send a text message
 * Sends a text message to a specified JID (Jabber ID) for a given client.
 */
export const postClientsByClientIdMessagesSendOptions = (options: Options<PostClientsByClientIdMessagesSendData>) => {
    return queryOptions({
        queryFn: async ({ queryKey, signal }) => {
            const { data } = await postClientsByClientIdMessagesSend({
                ...options,
                ...queryKey[0],
                signal,
                throwOnError: true
            });
            return data;
        },
        queryKey: postClientsByClientIdMessagesSendQueryKey(options)
    });
};

/**
 * Send a text message
 * Sends a text message to a specified JID (Jabber ID) for a given client.
 */
export const postClientsByClientIdMessagesSendMutation = (options?: Partial<Options<PostClientsByClientIdMessagesSendData>>): UseMutationOptions<PostClientsByClientIdMessagesSendResponse, PostClientsByClientIdMessagesSendError, Options<PostClientsByClientIdMessagesSendData>> => {
    const mutationOptions: UseMutationOptions<PostClientsByClientIdMessagesSendResponse, PostClientsByClientIdMessagesSendError, Options<PostClientsByClientIdMessagesSendData>> = {
        mutationFn: async (localOptions) => {
            const { data } = await postClientsByClientIdMessagesSend({
                ...options,
                ...localOptions,
                throwOnError: true
            });
            return data;
        }
    };
    return mutationOptions;
};