// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { PostClientsConnectData, PostClientsConnectResponses, PostClientsConnectErrors, GetClientsByClientIdChatsData, GetClientsByClientIdChatsResponses, GetClientsByClientIdChatsErrors, GetClientsByClientIdChatsByChatIdData, GetClientsByClientIdChatsByChatIdResponses, GetClientsByClientIdChatsByChatIdErrors, PostClientsByClientIdDisconnectData, PostClientsByClientIdDisconnectResponses, PostClientsByClientIdDisconnectErrors, GetClientsByClientIdEventsData, GetClientsByClientIdEventsResponses, GetClientsByClientIdEventsErrors, PostClientsByClientIdMessagesSendData, PostClientsByClientIdMessagesSendResponses, PostClientsByClientIdMessagesSendErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Connect a new WhatsApp client
 * Initializes a new WhatsApp client and returns a server-generated clientID.
 */
export const postClientsConnect = <ThrowOnError extends boolean = false>(options?: Options<PostClientsConnectData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<PostClientsConnectResponses, PostClientsConnectErrors, ThrowOnError>({
        url: '/clients/connect',
        ...options
    });
};

/**
 * Get all chats for a client
 * Retrieves a list of all contacts and groups (chats) associated with a specific client.
 */
export const getClientsByClientIdChats = <ThrowOnError extends boolean = false>(options: Options<GetClientsByClientIdChatsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetClientsByClientIdChatsResponses, GetClientsByClientIdChatsErrors, ThrowOnError>({
        url: '/clients/{clientID}/chats',
        ...options
    });
};

/**
 * Get chat details
 * Retrieves detailed information for a specific chat, including participants for groups.
 */
export const getClientsByClientIdChatsByChatId = <ThrowOnError extends boolean = false>(options: Options<GetClientsByClientIdChatsByChatIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetClientsByClientIdChatsByChatIdResponses, GetClientsByClientIdChatsByChatIdErrors, ThrowOnError>({
        url: '/clients/{clientID}/chats/{chatID}',
        ...options
    });
};

/**
 * Disconnect a WhatsApp client
 * Disconnects the specified client, closes the WhatsApp session, and cleans up resources.
 */
export const postClientsByClientIdDisconnect = <ThrowOnError extends boolean = false>(options: Options<PostClientsByClientIdDisconnectData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostClientsByClientIdDisconnectResponses, PostClientsByClientIdDisconnectErrors, ThrowOnError>({
        url: '/clients/{clientID}/disconnect',
        ...options
    });
};

/**
 * Stream real-time events for a client
 * Establishes a Server-Sent Events (SSE) connection to stream real-time WhatsApp events (e.g., QR codes, messages, connection status).
 */
export const getClientsByClientIdEvents = <ThrowOnError extends boolean = false>(options: Options<GetClientsByClientIdEventsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetClientsByClientIdEventsResponses, GetClientsByClientIdEventsErrors, ThrowOnError>({
        url: '/clients/{clientID}/events',
        ...options
    });
};

/**
 * Send a text message
 * Sends a text message to a specified JID (Jabber ID) for a given client.
 */
export const postClientsByClientIdMessagesSend = <ThrowOnError extends boolean = false>(options: Options<PostClientsByClientIdMessagesSendData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<PostClientsByClientIdMessagesSendResponses, PostClientsByClientIdMessagesSendErrors, ThrowOnError>({
        url: '/clients/{clientID}/messages/send',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};